-- SUPABASE SECURITY SETUP FOR EDRH - DEBUGGER FRIENDLY VERSION
-- This script sets up Row Level Security (RLS) policies

-- ============================================
-- STEP 0: DEBUG AND VERIFY TABLE STRUCTURES
-- ============================================
-- RUN THESE QUERIES FIRST TO CHECK YOUR ACTUAL COLUMN NAMES:

-- Check taken table structure:
SELECT column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name = 'taken' 
ORDER BY ordinal_position;

-- Check systems table structure:
SELECT column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name = 'systems' 
ORDER BY ordinal_position;

-- Check pois table structure:
SELECT column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name = 'pois' 
ORDER BY ordinal_position;

-- Check what's currently in taken table:
SELECT * FROM taken LIMIT 5;

-- ============================================
-- CONFIGURATION VARIABLES - EDIT THESE!
-- ============================================
-- Based on your findings above, update these column names:

-- For the TAKEN table:
-- Column that stores the commander name (you said it's 'by_cmdr'):
-- TAKEN_COMMANDER_COLUMN = 'by_cmdr'
-- Column that stores the system name:
-- TAKEN_SYSTEM_COLUMN = 'system_name' (or whatever it actually is)
-- Column that stores the date:
-- TAKEN_DATE_COLUMN = 'date_taken' (or whatever it actually is)

-- ============================================
-- STEP 1: ENABLE RLS (This should work as-is)
-- ============================================
ALTER TABLE systems ENABLE ROW LEVEL SECURITY;
ALTER TABLE taken ENABLE ROW LEVEL SECURITY;
ALTER TABLE pois ENABLE ROW LEVEL SECURITY;
ALTER TABLE preset_images ENABLE ROW LEVEL SECURITY;

-- ============================================
-- STEP 2: DROP ALL EXISTING POLICIES (This should work as-is)
-- ============================================
-- Drop all policies on systems table
DROP POLICY IF EXISTS "Systems are viewable by everyone" ON systems;
DROP POLICY IF EXISTS "anon_read_systems" ON systems;
DROP POLICY IF EXISTS "auth_read_systems" ON systems;
DROP POLICY IF EXISTS "systems_read_all" ON systems;

-- Drop all policies on taken table
DROP POLICY IF EXISTS "Taken systems are viewable by everyone" ON taken;
DROP POLICY IF EXISTS "Users can insert taken systems" ON taken;
DROP POLICY IF EXISTS "Users can update their own taken systems" ON taken;
DROP POLICY IF EXISTS "Users can delete their own taken systems" ON taken;
DROP POLICY IF EXISTS "anon_read_taken" ON taken;
DROP POLICY IF EXISTS "auth_all_taken" ON taken;
DROP POLICY IF EXISTS "taken_read_all" ON taken;
DROP POLICY IF EXISTS "taken_insert_one_per_commander" ON taken;
DROP POLICY IF EXISTS "taken_update_own" ON taken;
DROP POLICY IF EXISTS "taken_delete_own" ON taken;

-- Drop all policies on pois table
DROP POLICY IF EXISTS "POIs are viewable by everyone" ON pois;
DROP POLICY IF EXISTS "anon_read_pois" ON pois;
DROP POLICY IF EXISTS "auth_read_pois" ON pois;
DROP POLICY IF EXISTS "pois_read_all" ON pois;

-- Drop all policies on preset_images table
DROP POLICY IF EXISTS "Preset images are viewable by everyone" ON preset_images;
DROP POLICY IF EXISTS "anon_read_preset_images" ON preset_images;
DROP POLICY IF EXISTS "auth_read_preset_images" ON preset_images;
DROP POLICY IF EXISTS "preset_images_read_all" ON preset_images;

-- ============================================
-- STEP 3: CREATE READ POLICIES (These should work)
-- ============================================
-- Everyone can read all tables
CREATE POLICY "systems_read_all" ON systems
    FOR SELECT TO anon, authenticated
    USING (true);

CREATE POLICY "taken_read_all" ON taken
    FOR SELECT TO anon, authenticated
    USING (true);

CREATE POLICY "pois_read_all" ON pois
    FOR SELECT TO anon, authenticated
    USING (true);

CREATE POLICY "preset_images_read_all" ON preset_images
    FOR SELECT TO anon, authenticated
    USING (true);

-- ============================================
-- STEP 4: CREATE TAKEN TABLE POLICIES
-- ============================================
-- IMPORTANT: Replace 'by_cmdr' with your actual column name!

-- TEST POLICY FIRST - Simple insert policy without restrictions
-- Uncomment this to test if basic insert works:
/*
CREATE POLICY "taken_insert_test" ON taken
    FOR INSERT TO authenticated
    WITH CHECK (true);
*/

-- ACTUAL INSERT POLICY - Only one claim per commander
-- Replace 'by_cmdr' with your actual commander column name
CREATE POLICY "taken_insert_one_per_commander" ON taken
    FOR INSERT
    TO authenticated
    WITH CHECK (
        -- Must be claiming for yourself
        by_cmdr = current_setting('request.headers', true)::json->>'x-commander-name'
        AND
        -- Cannot already have a claim
        NOT EXISTS (
            SELECT 1 FROM taken t2
            WHERE t2.by_cmdr = current_setting('request.headers', true)::json->>'x-commander-name'
        )
    );

-- UPDATE POLICY - Can only update your own claims
-- Replace 'by_cmdr' with your actual commander column name
CREATE POLICY "taken_update_own" ON taken
    FOR UPDATE
    TO authenticated
    USING (
        by_cmdr = current_setting('request.headers', true)::json->>'x-commander-name'
    )
    WITH CHECK (
        by_cmdr = current_setting('request.headers', true)::json->>'x-commander-name'
    );

-- DELETE POLICY - Can only delete your own claims
-- Replace 'by_cmdr' with your actual commander column name
CREATE POLICY "taken_delete_own" ON taken
    FOR DELETE
    TO authenticated
    USING (
        by_cmdr = current_setting('request.headers', true)::json->>'x-commander-name'
    );

-- ============================================
-- STEP 5: HELPER FUNCTION
-- ============================================
-- Replace 'by_cmdr' with your actual commander column name
CREATE OR REPLACE FUNCTION has_existing_claim(commander_name TEXT)
RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 FROM taken 
        WHERE by_cmdr = commander_name
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ============================================
-- STEP 6: CLAIM SYSTEM FUNCTION
-- ============================================
-- You'll need to update ALL column names in this function!
CREATE OR REPLACE FUNCTION claim_system(
    p_system_name TEXT,
    p_commander TEXT
)
RETURNS JSON AS $$
DECLARE
    v_result JSON;
BEGIN
    -- Check if commander matches the one in the header
    IF p_commander != current_setting('request.headers', true)::json->>'x-commander-name' THEN
        RETURN json_build_object(
            'success', false,
            'error', 'Commander name mismatch'
        );
    END IF;
    
    -- Check if commander already has a claim
    IF has_existing_claim(p_commander) THEN
        RETURN json_build_object(
            'success', false,
            'error', 'Commander already has a claimed system'
        );
    END IF;
    
    -- Check if system is already taken
    -- IMPORTANT: Using actual column name 'system'
    IF EXISTS (SELECT 1 FROM taken WHERE system = p_system_name) THEN
        RETURN json_build_object(
            'success', false,
            'error', 'System is already claimed'
        );
    END IF;
    
    -- Insert the claim
    -- IMPORTANT: Using actual column names (system, by_cmdr) - no date column
    INSERT INTO taken (system, by_cmdr)
    VALUES (p_system_name, p_commander);
    
    RETURN json_build_object(
        'success', true,
        'message', 'System claimed successfully'
    );
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object(
            'success', false,
            'error', SQLERRM
        );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ============================================
-- STEP 7: RELEASE CLAIM FUNCTION
-- ============================================
CREATE OR REPLACE FUNCTION release_claim(p_commander TEXT)
RETURNS JSON AS $$
BEGIN
    -- Check if commander matches the one in the header
    IF p_commander != current_setting('request.headers', true)::json->>'x-commander-name' THEN
        RETURN json_build_object(
            'success', false,
            'error', 'Commander name mismatch'
        );
    END IF;
    
    -- Delete the claim
    -- IMPORTANT: Replace 'by_cmdr' with your actual commander column name!
    DELETE FROM taken WHERE by_cmdr = p_commander;
    
    IF FOUND THEN
        RETURN json_build_object(
            'success', true,
            'message', 'Claim released successfully'
        );
    ELSE
        RETURN json_build_object(
            'success', false,
            'error', 'No claim found for commander'
        );
    END IF;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ============================================
-- STEP 8: GRANT PERMISSIONS
-- ============================================
GRANT EXECUTE ON FUNCTION has_existing_claim TO anon, authenticated;
GRANT EXECUTE ON FUNCTION claim_system TO authenticated;
GRANT EXECUTE ON FUNCTION release_claim TO authenticated;

-- ============================================
-- STEP 9: CREATE INDEXES
-- ============================================
-- IMPORTANT: Using actual column names
CREATE INDEX IF NOT EXISTS idx_taken_by_cmdr ON taken(by_cmdr);
-- Using actual system column name:
CREATE INDEX IF NOT EXISTS idx_taken_system ON taken(system);

-- ============================================
-- VERIFICATION QUERIES
-- ============================================
-- Run these to verify everything is set up correctly:

-- Check if RLS is enabled:
SELECT tablename, rowsecurity 
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN ('systems', 'taken', 'pois', 'preset_images');

-- List all policies:
SELECT schemaname, tablename, policyname, cmd 
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename, policyname;

-- Test the current user's header:
SELECT current_setting('request.headers', true)::json->>'x-commander-name' AS current_commander;

-- Test if a specific commander has a claim:
-- SELECT has_existing_claim('SomeCommanderName');

-- ============================================
-- DEBUGGING TIPS:
-- ============================================
-- 1. Run the script section by section, not all at once
-- 2. After each section, check for errors
-- 3. If you get a column name error, update it in all places
-- 4. Common column name patterns:
--    - Commander: could be 'commander', 'cmdr', 'by_cmdr', 'cmdr_name', 'name'
--    - System: could be 'system', 'system_name', 'system_id'
--    - Date: could be 'date_taken', 'claimed_at', 'created_at', 'taken_date'
-- 5. Use the verification queries to check your progress